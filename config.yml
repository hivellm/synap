# Synap Server Configuration
# Similar to redis.conf pattern

# ============================================================================
# NETWORK
# ============================================================================

server:
  # By default Synap listens for connections from all the network interfaces
  # available on the server. Use "bind" to listen on specific interfaces.
  # Examples:
  # bind 127.0.0.1    # listens on loopback only (localhost)
  # bind 0.0.0.0      # listens on all interfaces
  host: "0.0.0.0"
  
  # Accept connections on the specified port, default is 15500.
  # If port 0 is specified Synap will not listen on a TCP socket.
  port: 15500
  
  # Enable WebSocket support for real-time subscriptions
  # (Planned for Phase 2)
  websocket_enabled: false

# ============================================================================
# MEMORY MANAGEMENT
# ============================================================================

kv_store:
  # Set a memory usage limit to the specified amount of bytes.
  # When the memory limit is reached Synap will try to remove keys
  # according to the eviction policy selected (see maxmemory-policy).
  #
  # If Synap can't remove keys according to the policy, or if the policy is
  # set to 'noeviction', Synap will start to reply with errors to commands
  # that would use more memory, like SET, INCR, etc.
  #
  # WARNING: maxmemory can be a good idea if you're using Synap as an LRU
  # or LFU cache, or to set a hard memory limit (using 'noeviction' policy).
  #
  # Redis-style memory specifications supported (future):
  # 1k  => 1000 bytes
  # 1kb => 1024 bytes
  # 1m  => 1000000 bytes
  # 1mb => 1024*1024 bytes
  # 1g  => 1000000000 bytes
  # 1gb => 1024*1024*1024 bytes
  #
  # units are case insensitive: 1GB 1Gb 1gB are all the same.
  max_memory_mb: 4096  # 4GB default
  
  # DANGEROUS COMMANDS (disabled by default for production safety)
  # Like Redis, FLUSHDB and FLUSHALL are disabled by default to prevent
  # accidental data loss. Enable only in development/testing environments.
  allow_flush_commands: false
  
  # MAXMEMORY POLICY: how Synap will select what to remove when maxmemory
  # is reached. You can select one from the following behaviors:
  #
  # lru      -> Evict least recently used keys (recommended for cache)
  # lfu      -> Evict least frequently used keys
  # ttl      -> Evict keys with shortest time-to-live first
  # none     -> Don't evict anything, just return an error on write operations
  #
  # LRU means Least Recently Used
  # LFU means Least Frequently Used
  #
  # Both LRU, LFU and TTL are implemented using approximated algorithms.
  #
  # The default is: lru
  eviction_policy: "lru"
  
  # TTL cleanup runs in background to remove expired keys.
  # Lower interval = more CPU usage but faster cleanup
  # Higher interval = less CPU usage but slower cleanup
  # Default: 100ms (same as Redis default of 10 times per second)
  ttl_cleanup_interval_ms: 100

# ============================================================================
# QUEUE SYSTEM (Phase 2)
# ============================================================================

queue:
  # Enable or disable queue system
  # Default: true
  enabled: true
  
  # Maximum number of messages per queue
  # When limit is reached, new publishes will fail
  # Default: 100000
  max_depth: 100000
  
  # ACK deadline in seconds
  # After this time, unacknowledged messages are requeued
  # Default: 30 seconds
  ack_deadline_secs: 30
  
  # Default maximum retry attempts before moving to DLQ
  # Can be overridden per message
  # Default: 3
  default_max_retries: 3
  
  # Default message priority (0-9, where 9 is highest)
  # Can be overridden per message
  # Default: 5
  default_priority: 5

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================

authentication:
  # Enable/disable authentication
  # Default: false (disabled for development)
  # IMPORTANT: Authentication is REQUIRED when binding to 0.0.0.0
  enabled: false
  
  # Require authentication for all endpoints
  # If false, anonymous access is allowed (with limited permissions)
  # Default: false
  require_auth: false
  
  # Default admin user (created on first startup if no users exist)
  # CHANGE THESE IN PRODUCTION!
  default_admin:
    username: "admin"
    password: "changeme"
  
  # Session/Token settings
  # API keys can have expiration time (in days)
  # Set to 0 for no expiration
  api_key_default_expiration_days: 90
  
  # IP whitelisting for API keys
  # Empty list = all IPs allowed
  # Example: ["192.168.1.0/24", "10.0.0.1"]
  api_key_allowed_ips: []

# Access Control Lists (ACL)
# Define who can access what resources
acl:
  # Enable ACL enforcement
  enabled: false
  
  # Default rules (examples)
  rules:
    # Public queue (no auth required)
    - resource: "queue:public"
      require_auth: false
      actions: ["read", "write"]
    
    # Protected queue (auth required)
    - resource: "queue:private"
      require_auth: true
      actions: ["read", "write"]
      allowed_users: []  # Empty = all authenticated users
      allowed_roles: ["admin", "queue_user"]
    
    # Admin-only queue
    - resource: "queue:admin"
      require_auth: true
      actions: ["all"]
      allowed_roles: ["admin"]
    
    # KV Store (read-only for authenticated users)
    - resource: "kv:*"
      require_auth: true
      actions: ["read"]
      allowed_users: []
    
    # KV Store write (admin only)
    - resource: "kv:*"
      require_auth: true
      actions: ["write", "delete"]
      allowed_roles: ["admin"]

# ============================================================================
# RATE LIMITING
# ============================================================================

rate_limit:
  # Enable or disable rate limiting (tower-governor implementation)
  # Uses token bucket algorithm with per-IP tracking
  # Protects against DoS attacks and excessive API usage
  # Default: false (disabled for maximum performance)
  enabled: false
  
  # Maximum requests per second per IP
  # Controls the refill rate of the token bucket
  # Recommended: 100-1000 for public APIs, 10000+ for internal services
  # Default: 1000 req/s
  requests_per_second: 1000
  
  # Burst size (maximum tokens in bucket)
  # Allows temporary spikes above the rate limit
  # Should be >= requests_per_second for smooth traffic
  # Recommended: 10-20% of requests_per_second
  # Default: 100
  burst_size: 100
  
  # Examples:
  # - Public API: enabled: true, requests_per_second: 100, burst_size: 20
  # - Internal API: enabled: false (or high limits: 10000 req/s)
  # - Development: enabled: false

# ============================================================================
# LOGGING
# ============================================================================

logging:
  # Specify the server verbosity level.
  # This can be one of:
  # trace (very verbose, for debugging)
  # debug (a lot of information, useful for development/testing)
  # info  (moderately verbose, what you want in production probably)
  # warn  (only very important / critical messages are logged)
  # error (only errors are logged)
  #
  # Default: info
  level: "info"
  
  # Log format: "json" or "pretty"
  # json: Machine-readable structured logs (recommended for production)
  # pretty: Human-readable colored output (good for development)
  format: "json"

# ============================================================================
# PROTOCOLS
# ============================================================================

protocols:
  # StreamableHTTP Protocol
  # Modern HTTP-based protocol with command routing and streaming support
  streamable_http:
    enabled: true
    path: "/api/v1/command"
  
  # REST API
  # Traditional REST endpoints for simple HTTP clients
  rest:
    enabled: true
    prefix: "/kv"
  
  # MCP (Model Context Protocol) - Planned for Phase 3
  # Integration with AI tools and agents
  # mcp:
  #   enabled: false
  #   port: 15501
  
  # UMICP (Universal Matrix Inter-Communication Protocol) - Planned for Phase 3
  # High-performance matrix and vector operations
  # umicp:
  #   enabled: false
  #   websocket_path: "/umicp"
  
  # Raw TCP Socket - Planned for Phase 3
  # High-performance binary protocol
  # tcp:
  #   enabled: false
  #   port: 15502

# ============================================================================
# MCP (Model Context Protocol) TOOLS
# ============================================================================

# Configure which MCP tool categories to expose
# Note: Cursor has limits on the number of MCP tools it can handle efficiently
# Default: Only essential tools (KV + Queue = 4 tools total)
# Maximum: All categories enabled = 16 tools

mcp:
  # KV Tools (3 tools): synap_kv_get, synap_kv_set, synap_kv_delete
  # Essential - recommended to keep enabled
  enable_kv_tools: true
  
  # Hash Tools (3 tools): synap_hash_get, synap_hash_set, synap_hash_getall
  enable_hash_tools: false
  
  # List Tools (3 tools): synap_list_push, synap_list_pop, synap_list_range
  enable_list_tools: false
  
  # Set Tools (3 tools): synap_set_add, synap_set_members, synap_set_inter
  enable_set_tools: false
  
  # Queue Tools (1 tool): synap_queue_publish
  # Essential - recommended to keep enabled
  enable_queue_tools: true
  
  # Sorted Set Tools (3 tools): synap_sortedset_zadd, synap_sortedset_zrange, synap_sortedset_zrank
  enable_sortedset_tools: false

# Note: All functionality is available via REST API and StreamableHTTP
# regardless of MCP tool configuration

# ============================================================================
# REPLICATION (✅ COMPLETE - Phase 3)
# ============================================================================

# Master-Slave replication for high availability and read scaling
# - 1 write master node + N read-only replica nodes
# - TCP binary protocol with length-prefixed framing
# - Full sync via snapshot transfer (CRC32 verified)
# - Partial sync via replication log (incremental updates)
# - Auto-reconnect with intelligent resync
replication:
  # Enable or disable replication
  # Default: false
  enabled: false
  
  # Node role: "master", "replica", or "standalone"
  # - master: Accepts writes, replicates to replicas
  # - replica: Read-only, syncs from master
  # - standalone: No replication (single node)
  # Default: "standalone"
  role: "standalone"
  
  # === MASTER CONFIGURATION ===
  # (Only used when role = "master")
  
  # Address where master listens for replica connections
  # Format: "host:port"
  # Default: "0.0.0.0:15501"
  # replica_listen_address: "0.0.0.0:15501"
  
  # === REPLICA CONFIGURATION ===
  # (Only used when role = "replica")
  
  # Master node address to sync from
  # Format: "host:port"
  # Example: "master.synap.local:15501"
  # master_address: "127.0.0.1:15501"
  
  # === PERFORMANCE TUNING ===
  
  # Heartbeat interval in milliseconds
  # Lower = faster failure detection, higher network overhead
  # Default: 1000 (1 second)
  heartbeat_interval_ms: 1000
  
  # Maximum replication lag threshold (milliseconds)
  # Alert/log warning when replica lags beyond this
  # Default: 10000 (10 seconds)
  max_lag_ms: 10000
  
  # Replication buffer size in KB
  # Larger buffer = better throughput, more memory
  # Default: 256 (256KB)
  buffer_size_kb: 256
  
  # Auto-reconnect on disconnect
  # Default: true
  auto_reconnect: true
  
  # Reconnect delay in milliseconds
  # Delay between reconnection attempts
  # Default: 5000 (5 seconds)
  reconnect_delay_ms: 5000
  
  # Replica timeout in seconds
  # Master marks replica as dead after this timeout
  # Default: 30 seconds
  replica_timeout_secs: 30

# ============================================================================
# PERSISTENCE (Phase 2 - IMPLEMENTED)
# ============================================================================

# Optional persistence using Write-Ahead Log and Snapshots
persistence:
  enabled: true  # Data durability enabled by default
  
  # Write-Ahead Log (WAL) settings
  wal:
    enabled: true
    path: "./data/wal/synap.wal"
    buffer_size_kb: 64
    fsync_mode: "always"  # always, periodic, never - CHANGED TO ALWAYS FOR TESTING
    fsync_interval_ms: 1000
    max_size_mb: 1024
  
  # Snapshot settings
  snapshot:
    enabled: true
    directory: "./data/snapshots"
    interval_secs: 300  # Every 5 minutes
    operation_threshold: 10000  # Or every 10K operations
    max_snapshots: 10  # Keep last 10 snapshots
    compression: false  # Not yet implemented

# ============================================================================
# SECURITY (Planned for Phase 4)
# ============================================================================

# Authentication and authorization
# security:
#   # Require password authentication
#   require_auth: false
#   password: ""
#   
#   # API keys for programmatic access
#   api_keys:
#     enabled: false
#     keys: []
#   
#   # TLS/SSL encryption
#   tls:
#     enabled: false
#     cert_path: ""
#     key_path: ""

# ============================================================================
# COMPRESSION (Phase 3 - Not yet active)
# ============================================================================

# Payload compression to save memory and bandwidth
# compression:
#   # Enable compression globally
#   enabled: false
#   
#   # Default algorithm: lz4 (fast) or zstd (better ratio)
#   default_algorithm: "lz4"
#   
#   # Minimum payload size to compress (bytes)
#   # Don't compress payloads smaller than this (overhead not worth it)
#   min_payload_size: 1024  # 1KB
#   
#   # Zstd-specific settings
#   zstd:
#     level: 3  # Compression level (1-22, 3 = balanced)

# ============================================================================
# ADVANCED
# ============================================================================

# Performance and resource limits
# limits:
#   max_clients: 10000
#   timeout: 0  # Close connection after N seconds of idleness (0 = no timeout)
#   tcp_keepalive: 300
#   tcp_backlog: 511

