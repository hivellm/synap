[package]
name = "synap-server"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true

[dependencies]
tokio.workspace = true
axum = { workspace = true, features = ["ws"] }
radix_trie.workspace = true
parking_lot.workspace = true
serde.workspace = true
serde_json.workspace = true
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["json", "env-filter"] }
thiserror.workspace = true
anyhow.workspace = true
tower-http.workspace = true
tower = { version = "0.5", features = ["limit", "timeout"] }
uuid = { version = "1.11", features = ["v4", "serde"] }
tokio-tungstenite = "0.28"
futures-util = "0.3"
serde_yaml = "0.9"
clap = { version = "4.5", features = ["derive"] }
lz4.workspace = true
zstd.workspace = true
bcrypt.workspace = true
chrono.workspace = true
base64.workspace = true
rand.workspace = true
bincode = "1.3"
crc32fast = "1.4"
compact_str.workspace = true
rmcp = { version = "0.8.2", features = ["server", "transport-streamable-http-server"] }
hyper = "1.7"
hyper-util = { version = "0.1", features = ["tokio", "server", "server-auto"] }

# UMICP (Universal Matrix Intelligent Communication Protocol)
umicp-core = { version = "0.2.3", features = ["websocket", "http2"] }

# Metrics (Prometheus)
prometheus = "0.14"
lazy_static = "1.4"
sys-info = "0.9"

# Testing
tempfile = "3.15"

[dev-dependencies]
criterion = { version = "0.7", features = ["async_tokio"] }
reqwest = { version = "0.12", features = ["json"] }
tokio-test = "0.4"
tokio-tungstenite = { version = "0.28", features = ["native-tls"] }

# NOTE: Benchmark declarations removed to allow Docker builds without copying benchmark files
# Cargo auto-detects benchmarks in benches/ directory, so they still work with `cargo bench`
# Explicit [[bench]] declarations only needed for custom configurations

